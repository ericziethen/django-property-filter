name: CI  # Name becomes part of the badge location

on:
  push:
    tags:
    - '[0-9]+.[0-9]+.[0-9]+'
  pull_request:
    branches:
    - master
    - main

jobs:

  # Main testing Matrix
  # containers can only run on linux, so if we want postgres it will only work on linux
  # there seems to be no way of simple switching or adding a condition so if we want to run windows
  # as well we would have to create a different job with the same matrix that runs sqlite only
  # https://github.community/t/use-services-in-some-jobs-of-a-matrix/16938
  linux_test_matrix:
    strategy:
      matrix:
        os: ["ubuntu-latest"]
        python-version: ['3.12','3.11', '3.10', '3.9', '3.8', '3.7']
        django-db: [SQLITE, POSTGRES]
        fake-volume-test-arg: ["NONE"]  # Using this enables us to add new combinations that match a matrix jobs configuration without replacing it because it doesn't match this attribute

        # Include will match the expanded matrix, if not it will add a job
        include:
            ### MATCH EXISTING COMBINATIONS ###
            - django-db: SQLITE
              tox_args: sqlite
              tox_skip_env: .*postgres.*|.*all_filter_volume_test.*
            - django-db: POSTGRES
              tox_args: postgres-github-actions
              tox_skip_env: .*sqlite.*|.*all_filter_volume_test.*

            ### NEW COMBINATIONS ###
            - os: ubuntu-latest
              python-version: '3.12'
              django-db: SQLITE  # Maybe Use Postgres if Faster, or Both
              tox_args: sqlite
              name_suffix: "- Volume Test"
              tox_env: mylinux-py312-all_filter_volume_test-sqlite
              tox_skip_env: NONE
              fake-volume-test-arg: linux_vol_test

            - os: ubuntu-latest
              python-version: '3.12'
              django-db: POSTGRES  # Maybe Use Postgres if Faster, or Both
              tox_args: postgres-github-actions
              name_suffix: "- Volume Test"
              tox_env: mylinux-py312-all_filter_volume_test-postgres
              tox_skip_env: NONE
              fake-volume-test-arg: win_vol_test

    # Service containers to run with `runner-job`
    services:
      # Label used to access the service container
      postgres:
        # Docker Hub image
        image: postgres
        # Provide the password for postgres
        env:
          POSTGRES_PASSWORD: postgres
        # Set health checks to wait until postgres has started
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          # Maps tcp port 5432 on service container to the host
          - 5432:5432

    name: Py ${{ matrix.python-version }}, ${{ matrix.django-db }}, ${{ matrix.os }} ${{ matrix.name_suffix }}
    runs-on: "${{ matrix.os }}"
    steps:
      - uses: actions/checkout@v2
      - name: Print Info
        run: |
          echo ### Print Matrix Variables
          echo 'tox_args=${{ matrix.tox_args }}'

      - name: Setup Python
        uses: actions/setup-python@v2
        with:
          python-version: ${{ matrix.python-version }}

      - name: Setup Env
        run: |
          pip --version
          python --version --version
          python -c "import sqlite3; print('sqlite3 Version on Python:', sqlite3.sqlite_version)"
          pip list
          python -m pip install --upgrade pip pipenv
          pip list
          printenv

      - name: Set Tox Env Variable
        if: ${{ matrix.tox_env != 'NONE' }}
        run: |
          echo matrix.tox_env = "${{ matrix.tox_env }}"
          echo "TOXENV=${{ matrix.tox_env }}" >> $GITHUB_ENV

      - name: Set Tox Skip Env Variable
        if: ${{ matrix.tox_skip_env != 'NONE' }}
        run: |
          echo matrix.tox_skip_env = "${{ matrix.tox_skip_env }}"
          echo "TOX_SKIP_ENV=${{ matrix.tox_skip_env }}" >> $GITHUB_ENV

      - name: Install Dependencies
        run: pip install coverage tox-gh-actions

      - name: Run Tests
        env:
          IS_CI_BUILD: TRUE
          # The hostname used to communicate with the PostgreSQL service container
          POSTGRES_HOST: localhost
          # The default PostgreSQL port
          POSTGRES_PORT: 5432
        run: |
          coverage erase
          tox -- ${{ matrix.tox_args }}
      - name: "Convert coverage"
        run: "python -m coverage xml"
      - name: "Upload coverage to Codecov"
        uses: "codecov/codecov-action@v2"
        with:
          fail_ci_if_error: true

  # Basic Windows Tests because the linux matrix uses postgres with docker container
  # which is not supported on windows
  windows_test_matrix:
    strategy:
      matrix:
        os: ["windows-latest"]
        python-version: ['3.12','3.11', '3.10', '3.9', '3.8', '3.7']
        django-db: [SQLITE]
        fake-volume-test-arg: ["NONE"]  # Using this enables us to add new combinations that match a matrix jobs configuration without replacing it because it doesn't match this attribute

        # Include will match the expanded matrix, if not it will add a job
        include:
            ### MATCH EXISTING COMBINATIONS ###
            - django-db: SQLITE
              tox_args: sqlite
              tox_skip_env: .*postgres.*|.*all_filter_volume_test.*

            ### NEW COMBINATIONS ###
            - os: windows-latest
              python-version: '3.12'
              django-db: SQLITE
              tox_args: sqlite
              name_suffix: "- Volume Test"
              tox_env: mywindows-py312-all_filter_volume_test-sqlite
              tox_skip_env: NONE
              fake-volume-test-arg: win_vol_test

    name: Py ${{ matrix.python-version }}, ${{ matrix.django-db }}, ${{ matrix.os }} ${{ matrix.name_suffix }}
    runs-on: "${{ matrix.os }}"
    defaults:
      run:
        # Github actions doesn't support (at least right now) setting the shell based on environment variables
        # But setting the shell to bash will use Git-Bash on windows which can run batch scripts ok
        # https://github.community/t/using-matrix-to-specify-shell-is-it-possible/17065
        # https://github.community/t/declaring-a-default-shell-and-environment-variables-across-all-steps-in-a-job-github-actions/16228/2
        shell: bash
    steps:
      - uses: actions/checkout@v2
      - name: Print Info
        run: |
          echo ### Print Matrix Variables
          echo 'tox_args=${{ matrix.tox_args }}'

      - name: Setup Python
        uses: actions/setup-python@v2
        with:
          python-version: ${{ matrix.python-version }}

      - name: Setup Env
        run: |
          pip --version
          python --version --version
          python -c "import sqlite3; print('sqlite3 Version on Python:', sqlite3.sqlite_version)"
          pip list
          python -m pip install --upgrade pip pipenv
          pip list
          set

      - name: Set Tox Skip Env Variable
        if: ${{ matrix.tox_env != 'NONE' }}
        run: |
          echo "TOXENV=${{ matrix.tox_env }}" >> $GITHUB_ENV

      - name: Set Tox Skip Env Variable
        if: ${{ matrix.tox_skip_env != 'NONE' }}
        run: |
          echo "TOX_SKIP_ENV=${{ matrix.tox_skip_env }}" >> $GITHUB_ENV

      - name: Install Dependencies
        run: pip install tox-gh-actions

      - name: Run Tests
        run: |
          tox -- ${{ matrix.tox_args }}

  # Linting job
  linting:
    strategy:
      matrix:
        os: ["ubuntu-latest", "windows-latest"]
        include:
            - os: windows-latest
              script_name: .\dev/run_linters.bat
            - os: ubuntu-latest
              script_name: ./dev/run_linters.sh
    name: Latest Dev Linting
    runs-on: "${{ matrix.os }}"
    steps:
      - uses: actions/checkout@v2
      - name: Setup Python
        uses: actions/setup-python@v2
        with:
          python-version: '3.12'
      - name: Setup Env
        run: |
          pip --version
          python --version --version
          pip list
          python -m pip install --upgrade pip pipenv
          pip list
      - name: Install Dependencies
        run: |
          # don't use the '--upgrade' to not upgrade pinned requirements with generic ones
          pip install -r requirements-dev-testing.txt
          pip list
      - name: Run Linters
        run: ${{ matrix.script_name }}

  # Package safety job
  package_safety_checks:
    strategy:
      matrix:
        os: ["ubuntu-latest", "windows-latest"]
        include:
            - os: windows-latest
              script_name: .\dev/check_package_safety.bat
            - os: ubuntu-latest
              script_name: ./dev/check_package_safety.sh
    name: Pkg Safety (Failure Allowed)
    runs-on: "${{ matrix.os }}"
    steps:
      - uses: actions/checkout@v2
      - name: Setup Python
        uses: actions/setup-python@v2
        with:
          python-version: '3.12'
      - name: Setup Env
        run: |
          pip --version
          python --version --version
          python -c "import sqlite3; print('sqlite3 Version on Python:', sqlite3.sqlite_version)"
          pip list
          python -m pip install --upgrade pip pipenv
          pip install wheel
          pip list
      - name: Install Dependencies
        run: |
          # don't use the '--upgrade' to not upgrade pinned requirements with generic ones
          pip install -r requirements-dev-testing.txt
          pip list
      - name: Run Package Safety
        run: ${{ matrix.script_name }}

  # Deployment job
  deployment:
    if: startsWith(github.ref, 'refs/tags')
    runs-on: ubuntu-latest
    needs: [linux_test_matrix, windows_test_matrix, linting]
    name: Deployment
    steps:
      - uses: actions/checkout@v2
      - name: Setup Python
        uses: actions/setup-python@v2
        with:
          python-version: '3.12'
      - name: Run Release Check
        run: |
          ./dev/Packaging/check_github_actions_release.sh
      - name: Setup Env
        run: |
          pip --version
          python --version --version
          pip list
          python -m pip install --upgrade pip pipenv
          pip install wheel twine
          pip list
      - name: Create Wheel
        run: |
          ./dev/Packaging/create_wheel.sh
          echo Command: 'dir dist/*'
          dir dist/*
      - name: Check Wheel
        run: |
          ./dev/Packaging/check_wheels.sh
      - name: Publish distribution 📦 to Test PyPI
        uses: pypa/gh-action-pypi-publish@master
        with:
          password: ${{ secrets.PYPY_PROJ_TOKEN }}
          ### PyPy.Test settings
          # password: ${{ secrets.PYPY_TEST_PROJ_TOKEN }}
          # repository_url: https://test.pypi.org/legacy/
