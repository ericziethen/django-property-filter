[pycodestyle]
count = False
max-line-length = 120
statistics = True

ignore = E501, E722, W504
; E501 - Max Line Length, handled by Pylint
; E722 - do not use bare 'except', Already caught in pylint
; W504 - Break after binary Operator, clashing with W503

[tox]
; Mirror the testing of django-filter to ensure same compatability as good as possible
; Current tox Configuration in django filter
    ;    {py38, py39, py310, py311, py312}-django42,
    ;    {py310, py311, py312}-django50,
    ;    {py310, py311, py312}-django51,
    ;    {py310, py311, py312}-latest,
envlist =
    ; All the combinations we claim to support
    {mylinux,mywindows}-{py38,py39,py310,py311,py312,py313}-{django42}-{django_filter_23_5,django_filter_24_1,django_filter_24_2,django_filter_24_3,django_filter_latest}-{sqlite,postgres},
    {mylinux,mywindows}-{py310,py311,py312,py313}-{django50,django51}-{django_filter_23_5,django_filter_24_1,django_filter_24_2,django_filter_24_3,django_filter_latest}-{sqlite,postgres},


    ; Testing the latest Django (only use latest django-filter as well)
    {mylinux,mywindows}-{py38,py39,py310,py311,py312,py313}-django_latest-{django_filter_latest}-{sqlite,postgres},

    ; Testing for what we have in our dev environment
    {mylinux,mywindows}-{py38,py39,py310,py311,py312,py313}-dev_latest-{sqlite,postgres},  # Special Configuration below

[gh-actions]
python =
    3.8: py38
    3.9: py39
    3.10: py310
    3.11: py311
    3.12: py312
    3.13: py313

[testenv]
# Environment Variables to pass into tox
passenv =
    IS_CI_BUILD  # Used by Pytest to identify ci builds

allowlist_externals =
    /bin/sh
    sh
    dev\run_tests.bat
    set
    printenv
    cmd.exe

platform =
    mylinux: linux
    mywindows: win32

deps =
    django42: Django>=4.2,<5.0
    django50: Django>=5.0b<5.1
    django51: Django>=5.1,<5.2
    django_latest: django

    django_filter_23_5: django-filter==23.5
    django_filter_24_1: django-filter==24.1
    django_filter_24_2: django-filter==24.2
    django_filter_24_3: django-filter==24.3
    django_filter_latest: django-filter

    postgres: psycopg[binary,pool]

    # Specifying the pytest versions, so on future runs we don't run with later, untested versions
    # !!! These versions "MUST" match the ones in "requirements.txt"
    pytest==8.3.3
    pytest-cov==5.0.0
    pytest-django==4.9.0

commands_pre = # !!! Leave blank, to be overwritten in special sections below

commands =
    pip list
    mywindows: cmd.exe /C set  # In case running bash e.g. Git Bash from windows
    mylinux: printenv

    # We're passing in the DB to test against
    mywindows: dev\run_tests.bat {posargs}
    mylinux: sh -c './dev/run_tests.sh {posargs}'

[testenv:{mylinux,mywindows}-{py38,py39,py310,py311,py312,py313}-dev_latest-{sqlite,postgres}]
deps =
    -rrequirements.txt

[testenv:{mylinux,mywindows}-{py38,py39,py310,py311,py312,py313}-all_filter_volume_test-{sqlite,postgres}]
setenv = 
    ALL_FILTER_VOLUME_TEST = TRUE
deps =
    -rrequirements.txt
commands_pre =  # Uninstall psycopg which got installed by command "-rrequirements.txt"
    sqlite: pip uninstall -y psycopg psycopg-binary psycopg-pool

; Disable for Testing, if not failing can remove
; [testenv:{mylinux,mywindows}-{py37,py38,py39,py310,py311}-{django32,django40,django41}-{django_filter23,django_filter24,django_filter211,django_filter221,django_filter_latest}-{sqlite,postgres}]
; # Disable warnings for older (non supported) Django versions, Github actions failed because of deprecated warnings
; setenv = 
;     ENV_PYTEST_EXTRA_ARGS = -p no:warnings
