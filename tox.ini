[pycodestyle]
count = False
max-line-length = 120
statistics = True

ignore = E501, E722, W504
; E501 - Max Line Length, handled by Pylint
; E722 - do not use bare 'except', Already caught in pylint
; W504 - Break after binary Operator, clashing with W503

[tox]
; Mirror the testing of django-filter to ensure same compatability
envlist =
    {mylinux,mywindows}-{py36,py37,py38,py39}-django22-django_filter_latest,
    {mylinux,mywindows}-{py36,py37,py38,py39}-django30-django_filter_latest,
    {mylinux,mywindows}-{py36,py37,py38,py39}-django31-django_filter_latest,
    {mylinux,mywindows}-{py36,py37,py38,py39}-django_latest-django_filter_latest,
    {mylinux,mywindows}-{py38,py39}-dev_latest,  # Special Configuration below
    {mylinux,mywindows}-{py36,py37,py38,py39}-all_filter_volume_test,

[gh-actions]
python =
    2.7: py27
    3.6: py36
    3.7: py37
    3.8: py38
    3.9: py39

[testenv]
# Environment Variables to pass into tox
passenv =
    IS_CI_BUILD  # Used by Pytest to identify ci builds

allowlist_externals =
    /bin/sh
    dev\run_tests.bat
    set
    printenv

platform =
    mylinux: linux
    mywindows: win32

deps =
    django22: django~=2.2.0
    django30: django~=3.0.0
    django31: django~=3.1
    django_latest: django
    django_filter_latest: django-filter
    pytest-cov
    pytest-django
    psycopg2

commands_pre =
    pip list
    mywindows: cmd.exe /C set  # In case running bash e.g. Git Bash from windows
    mylinux: printenv

commands =
    # We're passing in the DB to test against
    mywindows: dev\run_tests.bat {posargs}
    mylinux: sh -c './dev/run_tests.sh {posargs}'

[testenv:{mylinux,mywindows}-{py38,py39}-dev_latest]
deps =
    -rrequirements-dev-testing.txt

[testenv:{mylinux,mywindows}-{py36,py37,py38,py39}-all_filter_volume_test]
setenv = 
    ALL_FILTER_VOLUME_TEST = TRUE
deps =
    -rrequirements-dev-testing.txt
